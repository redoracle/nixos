name: Build and Deploy NixOS Docker Image

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday at UTC midnight
  push:
    branches:
      - main
      - master

permissions:
  contents: read
  packages: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      FALLBACK_TAG: dev

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract and validate Nix version
        id: get_version
        run: |
          echo "🔍 Building image and extracting Nix version…"
          IMAGE_ID=$(docker build -q .)
          NIX_VERSION=$(docker run --rm "$IMAGE_ID" nix-env --version | awk '{print $3}')
          if [[ -z "$NIX_VERSION" ]]; then
            echo "❌ Could not detect Nix version!"
            exit 1
          fi
          echo "✅ Detected NIX_VERSION=$NIX_VERSION"
          echo "NIX_VERSION=$NIX_VERSION" >> $GITHUB_ENV

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/nixos:${{ env.NIX_VERSION }}
            ghcr.io/${{ github.repository_owner }}/nixos:latest
            ${{ secrets.DOCKER_USERNAME }}/nixos:${{ env.NIX_VERSION }}
            ${{ secrets.DOCKER_USERNAME }}/nixos:latest

      - name: Check if GitHub Release exists
        id: check_release
        run: |
          echo "🔎 Checking for existing release v${{ env.NIX_VERSION }}…"
          status=$(curl -s -o /dev/null -w "%{http_code}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ env.NIX_VERSION }}")
          echo "create_release=$([[ $status == 404 ]] && echo true || echo false)" >> $GITHUB_ENV
          echo "Existing release status code: $status"

      - name: Create GitHub Release
        if: env.create_release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.NIX_VERSION }}
          name: NixOS Docker Image v${{ env.NIX_VERSION }}
          body: |
            🚀 NixOS Docker image version **${{ env.NIX_VERSION }}** has been built and pushed to:
            • GitHub Container Registry  
            • Docker Hub
          draft: false
          prerelease: false

      - name: Post-build cleanup
        run: docker builder prune --force